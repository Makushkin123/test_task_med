# Вы продукт-менеджер и в настоящее время возглавляете команду по разработке нового продукта. К сожалению, последняя версия вашего продукта не прошла проверку качества. Поскольку каждая версия разрабатывается на основе предыдущей версии, все версии после сломанной версии тоже сломаны.
# Предположим, у вас есть n версий [1, 2, ..., n] и вы хотите найти первую сломанную версию, из-за которой все последующие будут сломаны.
# Вам предоставляется bool API isBrokenVersion (версия), который возвращает, является ли версия сломанной. Реализуйте функцию для поиска первой сломанной версии. Вы должны свести к минимуму количество обращений к API.

def isBrokenVersion(index):
    global api
    return bool(api[index])


# сложность этого алгоритма составляет O(log n)
# идея: использую бинарный поиск, так как после первого поломанного элемента,
# все остальные  элементы также поломаны.
def solve(n: int) -> int:
    left, right = 0, n -1

    while left < right:
        mid = (left + right) // 2

        if isBrokenVersion(mid):
            right = mid
        else:
            left = mid + 1

    return left + 1


api = [0,0,0,1]

print(solve(len(api)))